import subprocess
import sys
import init_workers
import time

class Master(process):
	
	def setup(workers, job_configs): 
		self.results = {}
		self.num_jobs = len(job_configs)
		self.num_done_jobs = 0
		self.remain_jobs = job_configs

	def receive(msg=('DoneJob', output), from_= w): 
		# collect output
		if str(w) not in results:
			results[str(w)] = {}
		self.results[str(w)][output[0]] = output[1]
		output("Received 'DoneJob' from " + str(w) + '\nOutput: ' + str(output))
		self.num_done_jobs += 1
		if len(self.remain_jobs) != 0:
			send(('JobAssign', self.remain_jobs.pop(0)), to=w)

	def run():
		begin_elapsed_time = time.time()
		begin_cpu_time = time.process_time()

		while (len(self.workers) != 0 && len(self.remain_jobs) != 0):
			send(('JobAssign', remain_jobs.pop(0)), to=self.workers.pop(0))
		
		await(self.num_done_jobs == self.num_jobs)	
		elapsed_time = time.time() - begin_elapsed_time
		cpu_time = time.process_time() - begin_cpu_time
		with open('./output_results.txt', 'a') as f_out:
			f_out.write('============================================\nElapsed time at master node: ' + str(elapsed_time) + ' sec\n')
			f_out.write('============================================\nTotal CPU time at master node: ' + str(cpu_time) + ' sec\n')
		output("Received outputs from all workers\nResults: " + str(self.results))
		output_results_file =  "/home/ec2-user/run-exp/results.txt"
		with open(output_results_file, 'w') as out_f:
			for worker in self.results:
				out_f.write('==================================\n' + woker + '\n--------------------\n')
				for job in self.results[worker]:
					out_f.write(job + ': ' + str(self.results[worker][job]) + '\n')
				out_f.write('\n\n')

class Worker(process):
	
	def setup(): pass

	def minePolicies(config):
		begin_elapsed_mining_time = time.time()
		# run the algorithm.
		subprocess.run('sh /home/ec2-user/distrib-dtrmu/run-exp/run_' + str(config) + '.bash', shell=True)
		elapsed_mining_time = time.time() - begin_elapsed_mining_time
		# read the output files and extract the results .
		results = {}

		names = config.split('_')
		policy_name = names[0] + '_10' if 'eWorkforce' in names[0] else 'e-doc_75'
		scale_f = names[1]
		output_file_path = './mining-algorithms/output/scaling_f_' + scale_f + '/output_' + policy_name + '.txt'

		# compute average cpu time and average syntactic similarity from output file
		avg_time, avg_syn_sim = 0.0, 0.0
		with open(output_file_path, 'r') as f:
			for line in f:
				if 'Average Policy Syntactic Similarity' in line:
					avg_syn_sim = float(line.split(': ')[1].split(' ')[0])
				elif 'Average Running Time to generate learning data' in line:
					time_str = line.split(': ')[1].strip().split('min, ')
					avg_time += float(time_str[0].strip()) * 60 + float(time_str[1].split(' ')[0])
				elif 'Average running time for phase 1' in line:
					avg_time += float(line.split(': ')[1].strip())
				elif 'Average time in seconds' in line:
					avg_time += float(line.split(': ')[1].strip().split(' ')[0])
		
		return [avg_time, avg_syn_sim, elapsed_mining_time]


	def run():
		await(some(received(('JobAssign', job), from_=master)))
		begin_cpu_time = time.process_time()
		output("Received JobAssign: " + str(job))
		# run policy mining method
		output = minePolicies(jobs)
		output.append(time.process_time() - begin_cpu_time)
		results = (job, output)
		send(('DoneJob', results), to=master)
  
def main():
	# read list of configs from file
	configs_list_file =  "/home/ec2-user/run-exp/conifgs_list.txt"
	job_configs = []
	with open(configs_list_file, "r") as configs_f:
		for config in conigs_f:
			if "#" not in config:
				job_configs.append(config.strip())

	# create workers
	num_vms = int(sys.argv[1])
	num_workers_per_vm = int(sys.argv[2])

	if len(sys.argv) > 3:
		if sys.argv[3] == 'cw':
			init_workers.create_worker_machines(num_vms, num_workers_per_vm)

	node_addr_file =  "/home/ec2-user/distrib-dtrmu/newDaAddr.config"

	node_addrs = None
	with open(node_addr_file, "r") as f:
		node_addrs_str = f.read()
		node_addrs = node_addrs_str.split("\n")
	node_addrs = [addr for addr in node_addrs if addr != ""]
	assert len(node_addrs) != 0, "not enough workers"


	workers = []
	for i in range(len(node_addrs)):
		print('Initialze Worker: ' + node_addrs[i])
		worker = new(Worker, args=(), at=node_addrs[i])
		workers.append(next(iter(worker)))
	print('Done creating workers')
	# create master
	master = new(Master, args=(workers, job_configs))

	# run workers and master
	for worker in workers:
		start(worker)
	start(master)