	  User Manual for DTRM, DTRMU algorithms for Mining ReBAC Policies
                     Thang Bui and Scott D. Stoller
						Stony Brook University
			               
This file describes all input file formats, and describes how to run the program of Mining ReBAC Policies using DTRM and DTRMU algorithms. 

The algorithms' first phases are implemented in Python. The related files are in /DTRM and /DTRMU folders.

The second phase of DTRM and DTRMU is similar, so we can use the same program implemented in Java. The related files are in /improve-policy/ folder. 

======================================================================
SYSTEM REQUIREMENTS

Java 6 or higher

Python 3.x with external libraries numpy and scikit-learn installed.
 
Detail installation guide for numpy is available at https://docs.scipy.org/doc/numpy/user/install.html, 

and for scikit-learn is available at 
https://scikit-learn.org/stable/install.html

======================================================================
DATASETS

Sample datasets are available at ./sample-dataset/

There are 3 types of datasets that we use:
1. Attribute data file contains descriptions of class model, object model, and rule model.
see ./sample-dataset/brief-policy-language.txt for the detail descriptions.

2. Learning data files for the first phase (implemented in python) of DTRM and DTRMU algorithms. These files are generated by the LearningDataGenerator program. see ./LearningDataGenerator/README.txt for the detail descriptions. 

3. Rule files contains output rules of the first phase, which are the input rules of the second phase (implemented in Java) of DTRM and DTRMU.

======================================================================
IMPLEMENTATION OF THE FIRST PHASE WITH PYTHON

This section describe how to run the program for the first phase of the algorithms and how to set the parameters to run it.  The instructions are the same for DTRM and DTRMU for this phase. This description describes how to run with DTRMU algorithm from the DTRMU folder, and the instructions can be applied to run DTRM algorithm from the DTRM folder. Lets consider the working directory is the /DTRMU/ folder.

-------------------------------
CONFIGURATIONS

The configuration to run the program are specified in a .conf file. Sample config files are in .\configs\ and ..\DTRM\configs\ folders. 

.conf files contain lines of the form

<key>=<value>

The following keys are used:

policy_name=<string>
The name of the policy.

num_policies=<integer>
The number of policies to run with. Note that the attributes file must be named with the suffix "_n" with n starts from 0.

data_path=<string>
Within the named folder, the program looks for learning dataset with the name based on the policy_name, and num_policies. For example, policy_name=project-managment_5, and num_policies=2, the program looks for attribute datasets: project-managment_5_0, project-management_5_1.

output_path=<string>
The output folder which contains the set of rules learned from the first phase.

log_path=<string>
The folder which contains all of the logs and running times of the first phase of the algorithm.

mining_with_negation=true|false
If the value is true, the program run the mining with negation version of the algorithms (DTRM- and DTRMU-). Additional details are available in the paper.

max_count_iter=<integer>
The maximum number of iterations that the algorithm consider in the eliminating unknown features step. Check the paper for details. Note that this parameter is only used when running DTRMU and DTRMU- 

scoring_metric=entropy|gini
The splitting scoring metric used by the decision tree. "entropy" for Information Gain and "gini" for the Gini Index. Note that this parameter is only used when running DTRM and DTRM-. 

-------------------------------
OUTPUT FILES

There are two types of output files: 
(1) .rules files contain the learned rules, which are correctly formatted to parse in the second phase. These files are in the folder specified in the "output_path" configuration parameter.

(2) log files and files which contain summary of running times of the first phase. These files are in the folder specified in the "log_path" configuration parameter. 

======================================================================
IMPLEMENTATION OF THE SECOND PHASE WITH JAVA

This section describe how to compile the program for the second phase of the algorithms and how to set the parameters to run it.

-------------------------------
COMPILING THE SYSTEM

We first need to compile the program. Run the following commands with the working directory is /improve-policy/ folder to compile:

cd src
javac -cp "../libs/commons-math-2.2.jar;../libs/commons-lang3-3.4.jar;../libs/commons-math3-3.3.jar;../libs/jdi.jar." -d ../bin algo/*.java util/*.java

-------------------------------
CONFIGURATIONS

The configuration to run the program are specified in a .conf file. A sample config file is in .\configs\ folder. 

.conf files contain lines of the form

<key>=<value>

The following keys are used:

# directories to input attribute data and output files

sizes={<integer>, <integer>, ...}
The input size parameter of generated synthetic attribute data.

numPoliciesPerSize=<integer>
The number of attribute datasets for each size specified in "sizes".

policyName=name of the policy, the name should match with attribute data's policy name.

attributeDataPath=folder contains the attribute datasets
Within the named folder, the program looks for attribute dataset with the name based on the policyName, size of the policy and number of policies. For example, policyName=project-managment, sizes={5,10}, and numPoliciesPerSize=2, the program looks for attribute datasets: project-managment_5_0, project-management_5_1, project_managment_10_0, project_management_10_1.

minedRulesFromDTPath=folder contains the learned rules from the first phase.

outputPath=folder contains the output. Output files are described below. 

# other parameters
Other parameters that are not mentioned above can be ignored. These parameters are used for different features of the system. Default values for these parameters are available in the sample config file.

-------------------------------
OUTPUT FILES FORMAT

The output of this program is also the output of the algorithms. The outputs are specified in .output files. There are two types of .output files: (1) output files contain summary results, which report the average results over all experiments with different policies in one run, and (2) output files contain results of each policy. 

+++++++++++++++++++
An output file for running with a policy contains the following information:

Set of mined rules with their WSCs.

Set of original rules in the input policy and set of simplified rules in the input policy with their WSCs.

Syntactic similarity comparison of the set of mined rules and the set of simplified input rules.

Results on WSC and syntactic similarities of the mined policy comparing with the input policy and simplified input policy. Note that the reported "Rule-wse Semantic Similarity" is not the same with the Overall Semantic Similarity as explained in our paper. We did not report these values in our DTRM and DTRMU papers. 

Stats of object models and the running time of this phase. 

+++++++++++++++++++
An summary output file for running with multiple policies contains the following information:

Average WSCs of the mined policies, input policies, and simplified input policies. 

Average syntactic similarities of the mined policies with the input policies and simplified input policies. 

Average stats of object models and the average running time of this phase.  
 
======================================================================
RUNNING THE SYSTEM

for each run with a config file, the system runs experiments with parameter values in the cross-products set between all parameter values.

note that we need to allocate a large enough memory space for the program, since the implementation includes some cache optimizations which may require large memory space. We should allocate at least 3 GB when running with small polices, and at least 8GB when running with large policies.

-----------------------------------------------------
Running DTRMU and DTRMU- algorithms.

To run the algorithms on a dataset using parameters specified in a config files:

1. Generating training data from attribute data file.
The source codes and instruction how to generate training data from attribute data files are included in folder ./LearningDataGenerator/

2. Learning to get the set of rules from the first phase of the algorithms using source code in ./DTRMU/ folder. Note that the parameter "mining_with_negation" determines which algorithm the program runs (DTRMU or DTRMU-). The program requires 1 parameter: the path to the configuration file. 

To run the first phase, run the command line with the working directory: /algorithms/DTRMU/:
python main.py <config_file> with the config_file is the path to the configuration file.
Command line example:
python main.py ./configs/pm.conf 

3. Compile the program for the second phase as instructed above. 

Note that we might need to allocate a large enough memory space for the program, since the implementation includes some cache optimizations which may require large memory space. We should allocate at least 3 GB when running with small polices, and at least 8GB when running with large policies.

To run the second phase, run the command lines with the working directory: /algorithms/improve-policy/:
cd bin
java -Xms3g -Xmx3g -cp ".;../libs/commons-math-2.2.jar;../libs/commons-lang3-3.4.jar;../libs/commons-math3-3.3.jar;../libs/jdi.jar." algo/ReBACMiner <config file> with the config_file is the path to the configuration file.
Command line example:
cd bin
java -Xms3g -Xmx3g -cp ".;../libs/commons-math-2.2.jar;../libs/commons-lang3-3.4.jar;../libs/commons-math3-3.3.jar;../libs/jdi.jar." algo/ReBACMiner ..\\configs\\pm.conf


-----------------------------------------------------
Running DTRM and DTRM- algorithms.

To run the algorithms on a dataset using parameters specified in a config files, follow the instructions for running DTRMU and DTRMU- algorithms. For step 2, running the program in ./DTRM/ folder instead of ./DTRMU. folder. 
